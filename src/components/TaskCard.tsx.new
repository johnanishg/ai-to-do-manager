import React from 'react';
import { Task, Subtask } from '../types';
import { Edit2, Trash2, Check, Circle, Clock, AlertCircle, Flag } from 'lucide-react';

interface TaskCardProps {
  task: Task;
  onToggle: (id: string) => void;
  onEdit: (task: Task) => void;
  onDelete: (id: string) => void;
}

const TaskCard = ({ task, onToggle, onEdit, onDelete }: TaskCardProps): JSX.Element => {
  const getPriorityColor = (priority: string): string => {
    switch (priority) {
      case 'high': return 'text-red-500 bg-red-50 border-red-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-500 bg-gray-50 border-gray-200';
    }
  };

  const getPriorityIcon = (priority: string): JSX.Element => {
    switch (priority) {
      case 'high': return <AlertCircle className="w-4 h-4" />;
      case 'medium': return <Clock className="w-4 h-4" />;
      case 'low': return <Flag className="w-4 h-4" />;
      default: return <Circle className="w-4 h-4" />;
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border p-4 mb-4 hover:shadow-md transition-shadow">
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-3">
          <button
            onClick={() => task._id && onToggle(task._id)}
            className="p-1 rounded hover:bg-gray-100"
          >
            {task.completed ? (
              <Check className="w-5 h-5 text-green-500" />
            ) : (
              <Circle className="w-5 h-5 text-gray-400" />
            )}
          </button>
          <h3 className={`text-lg font-medium ${task.completed ? 'line-through text-gray-500' : ''}`}>
            {task.title}
          </h3>
        </div>
        <div className="flex items-center gap-2">
          <div className={`px-2 py-1 rounded-full text-sm flex items-center gap-1 ${getPriorityColor(task.priority)}`}>
            {getPriorityIcon(task.priority)}
            <span className="capitalize">{task.priority}</span>
          </div>
          <button
            onClick={() => onEdit(task)}
            className="p-1 rounded hover:bg-gray-100 text-gray-500"
          >
            <Edit2 className="w-4 h-4" />
          </button>
          <button
            onClick={() => task._id && onDelete(task._id)}
            className="p-1 rounded hover:bg-gray-100 text-gray-500"
          >
            <Trash2 className="w-4 h-4" />
          </button>
        </div>
      </div>
      
      <div className="ml-10">
        <p className="text-gray-600 mb-2">{task.description}</p>
        
        {task.subtasks && task.subtasks.length > 0 && (
          <div className="mb-2">
            <div className="text-sm font-medium text-gray-700 mb-1">Subtasks:</div>
            <ul className="space-y-1">
              {task.subtasks.map((subtask: Subtask) => (
                <li key={subtask.id} className="flex items-center gap-2 text-sm text-gray-600">
                  <Circle className="w-3 h-3" />
                  <span>{subtask.title}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        <div className="flex flex-wrap gap-2 mt-3">
          {task.tags && task.tags.map((tag: string, index: number) => (
            <span
              key={index}
              className="px-2 py-1 bg-blue-50 text-blue-600 rounded-full text-xs font-medium"
            >
              {tag}
            </span>
          ))}
          {task.estimatedTime && (
            <span className="px-2 py-1 bg-purple-50 text-purple-600 rounded-full text-xs font-medium flex items-center gap-1">
              <Clock className="w-3 h-3" />
              {task.estimatedTime}m
            </span>
          )}
          {task.category && (
            <span className="px-2 py-1 bg-gray-50 text-gray-600 rounded-full text-xs font-medium">
              {task.category}
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default TaskCard;
